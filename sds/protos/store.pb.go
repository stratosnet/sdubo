// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.3
// source: store.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PPStateType int32

const (
	PPStateType_PP_STATE_OFFLINE     PPStateType = 0
	PPStateType_PP_STATE_ONLINE      PPStateType = 1
	PPStateType_PP_STATE_SUSPEND     PPStateType = 2
	PPStateType_PP_STATE_MAINTENANCE PPStateType = 3
)

// Enum value maps for PPStateType.
var (
	PPStateType_name = map[int32]string{
		0: "PP_STATE_OFFLINE",
		1: "PP_STATE_ONLINE",
		2: "PP_STATE_SUSPEND",
		3: "PP_STATE_MAINTENANCE",
	}
	PPStateType_value = map[string]int32{
		"PP_STATE_OFFLINE":     0,
		"PP_STATE_ONLINE":      1,
		"PP_STATE_SUSPEND":     2,
		"PP_STATE_MAINTENANCE": 3,
	}
)

func (x PPStateType) Enum() *PPStateType {
	p := new(PPStateType)
	*p = x
	return p
}

func (x PPStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PPStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_store_proto_enumTypes[0].Descriptor()
}

func (PPStateType) Type() protoreflect.EnumType {
	return &file_store_proto_enumTypes[0]
}

func (x PPStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PPStateType.Descriptor instead.
func (PPStateType) EnumDescriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{0}
}

type TrafficTaskType int32

const (
	TrafficTaskType_UPLOAD   TrafficTaskType = 0
	TrafficTaskType_DOWNLOAD TrafficTaskType = 1
	TrafficTaskType_TRANSFER TrafficTaskType = 2
)

// Enum value maps for TrafficTaskType.
var (
	TrafficTaskType_name = map[int32]string{
		0: "UPLOAD",
		1: "DOWNLOAD",
		2: "TRANSFER",
	}
	TrafficTaskType_value = map[string]int32{
		"UPLOAD":   0,
		"DOWNLOAD": 1,
		"TRANSFER": 2,
	}
)

func (x TrafficTaskType) Enum() *TrafficTaskType {
	p := new(TrafficTaskType)
	*p = x
	return p
}

func (x TrafficTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_store_proto_enumTypes[1].Descriptor()
}

func (TrafficTaskType) Type() protoreflect.EnumType {
	return &file_store_proto_enumTypes[1]
}

func (x TrafficTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficTaskType.Descriptor instead.
func (TrafficTaskType) EnumDescriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{1}
}

type PPWeightIncrEvent int32

const (
	PPWeightIncrEvent_UPLOAD_SUCCESS        PPWeightIncrEvent = 0
	PPWeightIncrEvent_DOWNLOAD_SUCCESS      PPWeightIncrEvent = 1
	PPWeightIncrEvent_BACKUP_SUCCESS        PPWeightIncrEvent = 2
	PPWeightIncrEvent_STATUS_REPORT_SUCCESS PPWeightIncrEvent = 3
	PPWeightIncrEvent_TRANSFER_SUCCESS      PPWeightIncrEvent = 4
)

// Enum value maps for PPWeightIncrEvent.
var (
	PPWeightIncrEvent_name = map[int32]string{
		0: "UPLOAD_SUCCESS",
		1: "DOWNLOAD_SUCCESS",
		2: "BACKUP_SUCCESS",
		3: "STATUS_REPORT_SUCCESS",
		4: "TRANSFER_SUCCESS",
	}
	PPWeightIncrEvent_value = map[string]int32{
		"UPLOAD_SUCCESS":        0,
		"DOWNLOAD_SUCCESS":      1,
		"BACKUP_SUCCESS":        2,
		"STATUS_REPORT_SUCCESS": 3,
		"TRANSFER_SUCCESS":      4,
	}
)

func (x PPWeightIncrEvent) Enum() *PPWeightIncrEvent {
	p := new(PPWeightIncrEvent)
	*p = x
	return p
}

func (x PPWeightIncrEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PPWeightIncrEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_store_proto_enumTypes[2].Descriptor()
}

func (PPWeightIncrEvent) Type() protoreflect.EnumType {
	return &file_store_proto_enumTypes[2]
}

func (x PPWeightIncrEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PPWeightIncrEvent.Descriptor instead.
func (PPWeightIncrEvent) EnumDescriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{2}
}

type PPWeightDecrEvent int32

const (
	PPWeightDecrEvent_UPLOAD_FAIL              PPWeightDecrEvent = 0
	PPWeightDecrEvent_DOWNLOAD_FAIL            PPWeightDecrEvent = 1
	PPWeightDecrEvent_BACKUP_FAIL              PPWeightDecrEvent = 2
	PPWeightDecrEvent_STATUS_REPORT_FAIL       PPWeightDecrEvent = 3
	PPWeightDecrEvent_INBOUND_SPEED_STAT_FAIL  PPWeightDecrEvent = 4
	PPWeightDecrEvent_OUTBOUND_SPEED_STAT_FAIL PPWeightDecrEvent = 5
)

// Enum value maps for PPWeightDecrEvent.
var (
	PPWeightDecrEvent_name = map[int32]string{
		0: "UPLOAD_FAIL",
		1: "DOWNLOAD_FAIL",
		2: "BACKUP_FAIL",
		3: "STATUS_REPORT_FAIL",
		4: "INBOUND_SPEED_STAT_FAIL",
		5: "OUTBOUND_SPEED_STAT_FAIL",
	}
	PPWeightDecrEvent_value = map[string]int32{
		"UPLOAD_FAIL":              0,
		"DOWNLOAD_FAIL":            1,
		"BACKUP_FAIL":              2,
		"STATUS_REPORT_FAIL":       3,
		"INBOUND_SPEED_STAT_FAIL":  4,
		"OUTBOUND_SPEED_STAT_FAIL": 5,
	}
)

func (x PPWeightDecrEvent) Enum() *PPWeightDecrEvent {
	p := new(PPWeightDecrEvent)
	*p = x
	return p
}

func (x PPWeightDecrEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PPWeightDecrEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_store_proto_enumTypes[3].Descriptor()
}

func (PPWeightDecrEvent) Type() protoreflect.EnumType {
	return &file_store_proto_enumTypes[3]
}

func (x PPWeightDecrEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PPWeightDecrEvent.Descriptor instead.
func (PPWeightDecrEvent) EnumDescriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{3}
}

type PPTierLevel int32

const (
	PPTierLevel_UNQUALIFIED   PPTierLevel = 0
	PPTierLevel_PC            PPTierLevel = 1
	PPTierLevel_SPECIAL_BUILD PPTierLevel = 2
	PPTierLevel_CABINET       PPTierLevel = 3
)

// Enum value maps for PPTierLevel.
var (
	PPTierLevel_name = map[int32]string{
		0: "UNQUALIFIED",
		1: "PC",
		2: "SPECIAL_BUILD",
		3: "CABINET",
	}
	PPTierLevel_value = map[string]int32{
		"UNQUALIFIED":   0,
		"PC":            1,
		"SPECIAL_BUILD": 2,
		"CABINET":       3,
	}
)

func (x PPTierLevel) Enum() *PPTierLevel {
	p := new(PPTierLevel)
	*p = x
	return p
}

func (x PPTierLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PPTierLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_store_proto_enumTypes[4].Descriptor()
}

func (PPTierLevel) Type() protoreflect.EnumType {
	return &file_store_proto_enumTypes[4]
}

func (x PPTierLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PPTierLevel.Descriptor instead.
func (PPTierLevel) EnumDescriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{4}
}

type TierChangeType int32

const (
	TierChangeType_UPGRADED   TierChangeType = 0
	TierChangeType_DOWNGRADED TierChangeType = 1
)

// Enum value maps for TierChangeType.
var (
	TierChangeType_name = map[int32]string{
		0: "UPGRADED",
		1: "DOWNGRADED",
	}
	TierChangeType_value = map[string]int32{
		"UPGRADED":   0,
		"DOWNGRADED": 1,
	}
)

func (x TierChangeType) Enum() *TierChangeType {
	p := new(TierChangeType)
	*p = x
	return p
}

func (x TierChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TierChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_store_proto_enumTypes[5].Descriptor()
}

func (TierChangeType) Type() protoreflect.EnumType {
	return &file_store_proto_enumTypes[5]
}

func (x TierChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TierChangeType.Descriptor instead.
func (TierChangeType) EnumDescriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{5}
}

type PPNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress                 string      `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	WalletAddress              string      `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	NetworkAddress             string      `protobuf:"bytes,3,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
	RestAddress                string      `protobuf:"bytes,4,opt,name=rest_address,json=restAddress,proto3" json:"rest_address,omitempty"`
	DiskSize                   uint64      `protobuf:"varint,5,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	FreeDisk                   uint64      `protobuf:"varint,6,opt,name=free_disk,json=freeDisk,proto3" json:"free_disk,omitempty"`
	MemorySize                 uint64      `protobuf:"varint,7,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	OsAndVer                   string      `protobuf:"bytes,8,opt,name=os_and_ver,json=osAndVer,proto3" json:"os_and_ver,omitempty"`
	CpuInfo                    string      `protobuf:"bytes,9,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	MacAddress                 string      `protobuf:"bytes,10,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Version                    uint32      `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	P2PPubKey                  string      `protobuf:"bytes,12,opt,name=p2p_pub_key,json=p2pPubKey,proto3" json:"p2p_pub_key,omitempty"`
	State                      PPStateType `protobuf:"varint,13,opt,name=state,proto3,enum=protos.PPStateType" json:"state,omitempty"`
	IsActive                   uint32      `protobuf:"varint,14,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	LastStatReport             int64       `protobuf:"varint,15,opt,name=last_stat_report,json=lastStatReport,proto3" json:"last_stat_report,omitempty"`
	InitWeight                 float64     `protobuf:"fixed64,16,opt,name=init_weight,json=initWeight,proto3" json:"init_weight,omitempty"`
	OngoingWeight              float64     `protobuf:"fixed64,17,opt,name=ongoing_weight,json=ongoingWeight,proto3" json:"ongoing_weight,omitempty"`
	SpP2PAddress               string      `protobuf:"bytes,18,opt,name=sp_p2p_address,json=spP2pAddress,proto3" json:"sp_p2p_address,omitempty"`
	LastUnsuspended            int64       `protobuf:"varint,19,opt,name=last_unsuspended,json=lastUnsuspended,proto3" json:"last_unsuspended,omitempty"`
	InitialNodeTier            uint32      `protobuf:"varint,20,opt,name=initial_node_tier,json=initialNodeTier,proto3" json:"initial_node_tier,omitempty"` // range from 1 - 3
	OngoingNodeTier            uint32      `protobuf:"varint,21,opt,name=ongoing_node_tier,json=ongoingNodeTier,proto3" json:"ongoing_node_tier,omitempty"` // range from 0 - 3
	DepositBalance             string      `protobuf:"bytes,22,opt,name=deposit_balance,json=depositBalance,proto3" json:"deposit_balance,omitempty"`
	WeightScore                uint32      `protobuf:"varint,23,opt,name=weight_score,json=weightScore,proto3" json:"weight_score,omitempty"`
	LastReportPunishmentHeight int64       `protobuf:"varint,24,opt,name=last_report_punishment_height,json=lastReportPunishmentHeight,proto3" json:"last_report_punishment_height,omitempty"`
	LastDowngradeScoreDec      uint32      `protobuf:"varint,25,opt,name=last_downgrade_score_dec,json=lastDowngradeScoreDec,proto3" json:"last_downgrade_score_dec,omitempty"`
	LastDowngradeHeight        int64       `protobuf:"varint,26,opt,name=last_downgrade_height,json=lastDowngradeHeight,proto3" json:"last_downgrade_height,omitempty"`
	SpP2PAddrWhenDowngrade     string      `protobuf:"bytes,27,opt,name=sp_p2p_addr_when_downgrade,json=spP2pAddrWhenDowngrade,proto3" json:"sp_p2p_addr_when_downgrade,omitempty"`
	Latitude                   float64     `protobuf:"fixed64,28,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude                  float64     `protobuf:"fixed64,29,opt,name=longitude,proto3" json:"longitude,omitempty"`
	BeneficiaryAddress         string      `protobuf:"bytes,30,opt,name=beneficiary_address,json=beneficiaryAddress,proto3" json:"beneficiary_address,omitempty"`
	MinUnsuspendDeposit        string      `protobuf:"bytes,31,opt,name=min_unsuspend_deposit,json=minUnsuspendDeposit,proto3" json:"min_unsuspend_deposit,omitempty"`
	DownloadFailCount          uint32      `protobuf:"varint,32,opt,name=download_fail_count,json=downloadFailCount,proto3" json:"download_fail_count,omitempty"`
}

func (x *PPNodeInfo) Reset() {
	*x = PPNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPNodeInfo) ProtoMessage() {}

func (x *PPNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPNodeInfo.ProtoReflect.Descriptor instead.
func (*PPNodeInfo) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{0}
}

func (x *PPNodeInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *PPNodeInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *PPNodeInfo) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

func (x *PPNodeInfo) GetRestAddress() string {
	if x != nil {
		return x.RestAddress
	}
	return ""
}

func (x *PPNodeInfo) GetDiskSize() uint64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *PPNodeInfo) GetFreeDisk() uint64 {
	if x != nil {
		return x.FreeDisk
	}
	return 0
}

func (x *PPNodeInfo) GetMemorySize() uint64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *PPNodeInfo) GetOsAndVer() string {
	if x != nil {
		return x.OsAndVer
	}
	return ""
}

func (x *PPNodeInfo) GetCpuInfo() string {
	if x != nil {
		return x.CpuInfo
	}
	return ""
}

func (x *PPNodeInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *PPNodeInfo) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PPNodeInfo) GetP2PPubKey() string {
	if x != nil {
		return x.P2PPubKey
	}
	return ""
}

func (x *PPNodeInfo) GetState() PPStateType {
	if x != nil {
		return x.State
	}
	return PPStateType_PP_STATE_OFFLINE
}

func (x *PPNodeInfo) GetIsActive() uint32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *PPNodeInfo) GetLastStatReport() int64 {
	if x != nil {
		return x.LastStatReport
	}
	return 0
}

func (x *PPNodeInfo) GetInitWeight() float64 {
	if x != nil {
		return x.InitWeight
	}
	return 0
}

func (x *PPNodeInfo) GetOngoingWeight() float64 {
	if x != nil {
		return x.OngoingWeight
	}
	return 0
}

func (x *PPNodeInfo) GetSpP2PAddress() string {
	if x != nil {
		return x.SpP2PAddress
	}
	return ""
}

func (x *PPNodeInfo) GetLastUnsuspended() int64 {
	if x != nil {
		return x.LastUnsuspended
	}
	return 0
}

func (x *PPNodeInfo) GetInitialNodeTier() uint32 {
	if x != nil {
		return x.InitialNodeTier
	}
	return 0
}

func (x *PPNodeInfo) GetOngoingNodeTier() uint32 {
	if x != nil {
		return x.OngoingNodeTier
	}
	return 0
}

func (x *PPNodeInfo) GetDepositBalance() string {
	if x != nil {
		return x.DepositBalance
	}
	return ""
}

func (x *PPNodeInfo) GetWeightScore() uint32 {
	if x != nil {
		return x.WeightScore
	}
	return 0
}

func (x *PPNodeInfo) GetLastReportPunishmentHeight() int64 {
	if x != nil {
		return x.LastReportPunishmentHeight
	}
	return 0
}

func (x *PPNodeInfo) GetLastDowngradeScoreDec() uint32 {
	if x != nil {
		return x.LastDowngradeScoreDec
	}
	return 0
}

func (x *PPNodeInfo) GetLastDowngradeHeight() int64 {
	if x != nil {
		return x.LastDowngradeHeight
	}
	return 0
}

func (x *PPNodeInfo) GetSpP2PAddrWhenDowngrade() string {
	if x != nil {
		return x.SpP2PAddrWhenDowngrade
	}
	return ""
}

func (x *PPNodeInfo) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *PPNodeInfo) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *PPNodeInfo) GetBeneficiaryAddress() string {
	if x != nil {
		return x.BeneficiaryAddress
	}
	return ""
}

func (x *PPNodeInfo) GetMinUnsuspendDeposit() string {
	if x != nil {
		return x.MinUnsuspendDeposit
	}
	return ""
}

func (x *PPNodeInfo) GetDownloadFailCount() uint32 {
	if x != nil {
		return x.DownloadFailCount
	}
	return 0
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uoz          []byte `protobuf:"bytes,1,opt,name=uoz,proto3" json:"uoz,omitempty"`
	SerialNumber uint64 `protobuf:"varint,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetUoz() []byte {
	if x != nil {
		return x.Uoz
	}
	return nil
}

func (x *Account) GetSerialNumber() uint64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

type StandardTxReporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reporters    []string `protobuf:"bytes,1,rep,name=reporters,proto3" json:"reporters,omitempty"`
	Executed     bool     `protobuf:"varint,2,opt,name=executed,proto3" json:"executed,omitempty"`
	CreationTime int64    `protobuf:"varint,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (x *StandardTxReporter) Reset() {
	*x = StandardTxReporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardTxReporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardTxReporter) ProtoMessage() {}

func (x *StandardTxReporter) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardTxReporter.ProtoReflect.Descriptor instead.
func (*StandardTxReporter) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{2}
}

func (x *StandardTxReporter) GetReporters() []string {
	if x != nil {
		return x.Reporters
	}
	return nil
}

func (x *StandardTxReporter) GetExecuted() bool {
	if x != nil {
		return x.Executed
	}
	return false
}

func (x *StandardTxReporter) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

type SPNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     string `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	P2PPubkey      string `protobuf:"bytes,2,opt,name=p2p_pubkey,json=p2pPubkey,proto3" json:"p2p_pubkey,omitempty"`
	WalletAddress  string `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	NetworkAddress string `protobuf:"bytes,4,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
	ActiveState    uint32 `protobuf:"varint,5,opt,name=active_state,json=activeState,proto3" json:"active_state,omitempty"`
	IndexingCnt    uint32 `protobuf:"varint,6,opt,name=indexing_cnt,json=indexingCnt,proto3" json:"indexing_cnt,omitempty"`
	DepositBalance string `protobuf:"bytes,7,opt,name=deposit_balance,json=depositBalance,proto3" json:"deposit_balance,omitempty"`
}

func (x *SPNodeInfo) Reset() {
	*x = SPNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPNodeInfo) ProtoMessage() {}

func (x *SPNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPNodeInfo.ProtoReflect.Descriptor instead.
func (*SPNodeInfo) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{3}
}

func (x *SPNodeInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *SPNodeInfo) GetP2PPubkey() string {
	if x != nil {
		return x.P2PPubkey
	}
	return ""
}

func (x *SPNodeInfo) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *SPNodeInfo) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

func (x *SPNodeInfo) GetActiveState() uint32 {
	if x != nil {
		return x.ActiveState
	}
	return 0
}

func (x *SPNodeInfo) GetIndexingCnt() uint32 {
	if x != nil {
		return x.IndexingCnt
	}
	return 0
}

func (x *SPNodeInfo) GetDepositBalance() string {
	if x != nil {
		return x.DepositBalance
	}
	return ""
}

type WalletsToReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddrs []string `protobuf:"bytes,1,rep,name=wallet_addrs,json=walletAddrs,proto3" json:"wallet_addrs,omitempty"`
}

func (x *WalletsToReward) Reset() {
	*x = WalletsToReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletsToReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletsToReward) ProtoMessage() {}

func (x *WalletsToReward) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletsToReward.ProtoReflect.Descriptor instead.
func (*WalletsToReward) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{4}
}

func (x *WalletsToReward) GetWalletAddrs() []string {
	if x != nil {
		return x.WalletAddrs
	}
	return nil
}

type AggregatedTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalVolume uint64 `protobuf:"varint,1,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
}

func (x *AggregatedTraffic) Reset() {
	*x = AggregatedTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedTraffic) ProtoMessage() {}

func (x *AggregatedTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedTraffic.ProtoReflect.Descriptor instead.
func (*AggregatedTraffic) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{5}
}

func (x *AggregatedTraffic) GetTotalVolume() uint64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

type Traffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderP2PAddr    string          `protobuf:"bytes,1,opt,name=provider_p2p_addr,json=providerP2pAddr,proto3" json:"provider_p2p_addr,omitempty"`
	ProviderWalletAddr string          `protobuf:"bytes,2,opt,name=provider_wallet_addr,json=providerWalletAddr,proto3" json:"provider_wallet_addr,omitempty"`
	ConsumerWalletAddr string          `protobuf:"bytes,3,opt,name=consumer_wallet_addr,json=consumerWalletAddr,proto3" json:"consumer_wallet_addr,omitempty"`
	TaskId             string          `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType           TrafficTaskType `protobuf:"varint,5,opt,name=task_type,json=taskType,proto3,enum=protos.TrafficTaskType" json:"task_type,omitempty"`
	Volume             uint64          `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
	DeliveryTime       int64           `protobuf:"varint,7,opt,name=delivery_time,json=deliveryTime,proto3" json:"delivery_time,omitempty"`
	ResponseTime       int64           `protobuf:"varint,8,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
}

func (x *Traffic) Reset() {
	*x = Traffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traffic) ProtoMessage() {}

func (x *Traffic) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traffic.ProtoReflect.Descriptor instead.
func (*Traffic) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{6}
}

func (x *Traffic) GetProviderP2PAddr() string {
	if x != nil {
		return x.ProviderP2PAddr
	}
	return ""
}

func (x *Traffic) GetProviderWalletAddr() string {
	if x != nil {
		return x.ProviderWalletAddr
	}
	return ""
}

func (x *Traffic) GetConsumerWalletAddr() string {
	if x != nil {
		return x.ConsumerWalletAddr
	}
	return ""
}

func (x *Traffic) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Traffic) GetTaskType() TrafficTaskType {
	if x != nil {
		return x.TaskType
	}
	return TrafficTaskType_UPLOAD
}

func (x *Traffic) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Traffic) GetDeliveryTime() int64 {
	if x != nil {
		return x.DeliveryTime
	}
	return 0
}

func (x *Traffic) GetResponseTime() int64 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash                string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Name                string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size                uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	SliceNum            uint64 `protobuf:"varint,4,opt,name=slice_num,json=sliceNum,proto3" json:"slice_num,omitempty"`
	Download            uint32 `protobuf:"varint,5,opt,name=download,proto3" json:"download,omitempty"`
	State               uint32 `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	Time                int64  `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	EncryptionTag       string `protobuf:"bytes,8,opt,name=encryption_tag,json=encryptionTag,proto3" json:"encryption_tag,omitempty"`
	Replicas            uint32 `protobuf:"varint,9,opt,name=replicas,proto3" json:"replicas,omitempty"`
	DownloadReqCount    uint64 `protobuf:"varint,10,opt,name=download_req_count,json=downloadReqCount,proto3" json:"download_req_count,omitempty"`
	FailureCount        uint64 `protobuf:"varint,11,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	LastBackupTime      int64  `protobuf:"varint,12,opt,name=last_backup_time,json=lastBackupTime,proto3" json:"last_backup_time,omitempty"`
	ExpectedReplicas    uint32 `protobuf:"varint,13,opt,name=expected_replicas,json=expectedReplicas,proto3" json:"expected_replicas,omitempty"`
	MinExpectedReplicas uint32 `protobuf:"varint,14,opt,name=min_expected_replicas,json=minExpectedReplicas,proto3" json:"min_expected_replicas,omitempty"`
	LastDownloadTime    int64  `protobuf:"varint,15,opt,name=last_download_time,json=lastDownloadTime,proto3" json:"last_download_time,omitempty"`
	NeedReupload        bool   `protobuf:"varint,16,opt,name=need_reupload,json=needReupload,proto3" json:"need_reupload,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{7}
}

func (x *File) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetSliceNum() uint64 {
	if x != nil {
		return x.SliceNum
	}
	return 0
}

func (x *File) GetDownload() uint32 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *File) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *File) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *File) GetEncryptionTag() string {
	if x != nil {
		return x.EncryptionTag
	}
	return ""
}

func (x *File) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *File) GetDownloadReqCount() uint64 {
	if x != nil {
		return x.DownloadReqCount
	}
	return 0
}

func (x *File) GetFailureCount() uint64 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *File) GetLastBackupTime() int64 {
	if x != nil {
		return x.LastBackupTime
	}
	return 0
}

func (x *File) GetExpectedReplicas() uint32 {
	if x != nil {
		return x.ExpectedReplicas
	}
	return 0
}

func (x *File) GetMinExpectedReplicas() uint32 {
	if x != nil {
		return x.MinExpectedReplicas
	}
	return 0
}

func (x *File) GetLastDownloadTime() int64 {
	if x != nil {
		return x.LastDownloadTime
	}
	return 0
}

func (x *File) GetNeedReupload() bool {
	if x != nil {
		return x.NeedReupload
	}
	return false
}

type FileSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash         string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SliceHash        string `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	SliceSize        uint64 `protobuf:"varint,3,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	SliceNumber      uint64 `protobuf:"varint,4,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	SliceOffsetStart uint64 `protobuf:"varint,5,opt,name=slice_offset_start,json=sliceOffsetStart,proto3" json:"slice_offset_start,omitempty"`
	SliceOffsetEnd   uint64 `protobuf:"varint,6,opt,name=slice_offset_end,json=sliceOffsetEnd,proto3" json:"slice_offset_end,omitempty"`
	Status           uint32 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	TaskId           string `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Time             int64  `protobuf:"varint,9,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *FileSlice) Reset() {
	*x = FileSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSlice) ProtoMessage() {}

func (x *FileSlice) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSlice.ProtoReflect.Descriptor instead.
func (*FileSlice) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{8}
}

func (x *FileSlice) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *FileSlice) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *FileSlice) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *FileSlice) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *FileSlice) GetSliceOffsetStart() uint64 {
	if x != nil {
		return x.SliceOffsetStart
	}
	return 0
}

func (x *FileSlice) GetSliceOffsetEnd() uint64 {
	if x != nil {
		return x.SliceOffsetEnd
	}
	return 0
}

func (x *FileSlice) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FileSlice) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *FileSlice) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type UserHasFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName        string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	CreateTime      int64  `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	FileSize        uint64 `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	DesiredReplicas uint32 `protobuf:"varint,4,opt,name=desired_replicas,json=desiredReplicas,proto3" json:"desired_replicas,omitempty"`
	DesiredTier     uint32 `protobuf:"varint,5,opt,name=desired_tier,json=desiredTier,proto3" json:"desired_tier,omitempty"`
	AllowHigherTier bool   `protobuf:"varint,6,opt,name=allow_higher_tier,json=allowHigherTier,proto3" json:"allow_higher_tier,omitempty"`
}

func (x *UserHasFile) Reset() {
	*x = UserHasFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHasFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHasFile) ProtoMessage() {}

func (x *UserHasFile) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHasFile.ProtoReflect.Descriptor instead.
func (*UserHasFile) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{9}
}

func (x *UserHasFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UserHasFile) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserHasFile) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *UserHasFile) GetDesiredReplicas() uint32 {
	if x != nil {
		return x.DesiredReplicas
	}
	return 0
}

func (x *UserHasFile) GetDesiredTier() uint32 {
	if x != nil {
		return x.DesiredTier
	}
	return 0
}

func (x *UserHasFile) GetAllowHigherTier() bool {
	if x != nil {
		return x.AllowHigherTier
	}
	return false
}

type UserHasFileStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalFileNumber uint64 `protobuf:"varint,1,opt,name=total_file_number,json=totalFileNumber,proto3" json:"total_file_number,omitempty"`
}

func (x *UserHasFileStats) Reset() {
	*x = UserHasFileStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHasFileStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHasFileStats) ProtoMessage() {}

func (x *UserHasFileStats) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHasFileStats.ProtoReflect.Descriptor instead.
func (*UserHasFileStats) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{10}
}

func (x *UserHasFileStats) GetTotalFileNumber() uint64 {
	if x != nil {
		return x.TotalFileNumber
	}
	return 0
}

type UserShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId         string `protobuf:"bytes,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	RandCode        string `protobuf:"bytes,2,opt,name=rand_code,json=randCode,proto3" json:"rand_code,omitempty"`
	OpenType        uint32 `protobuf:"varint,3,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	Password        string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Hash            string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	WalletAddress   string `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ExpiryTimestamp int64  `protobuf:"varint,7,opt,name=expiry_timestamp,json=expiryTimestamp,proto3" json:"expiry_timestamp,omitempty"`
	ShareDuration   uint32 `protobuf:"varint,8,opt,name=share_duration,json=shareDuration,proto3" json:"share_duration,omitempty"`
	CreationTime    int64  `protobuf:"varint,9,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (x *UserShare) Reset() {
	*x = UserShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserShare) ProtoMessage() {}

func (x *UserShare) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserShare.ProtoReflect.Descriptor instead.
func (*UserShare) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{11}
}

func (x *UserShare) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *UserShare) GetRandCode() string {
	if x != nil {
		return x.RandCode
	}
	return ""
}

func (x *UserShare) GetOpenType() uint32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *UserShare) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserShare) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *UserShare) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *UserShare) GetExpiryTimestamp() int64 {
	if x != nil {
		return x.ExpiryTimestamp
	}
	return 0
}

func (x *UserShare) GetShareDuration() uint32 {
	if x != nil {
		return x.ShareDuration
	}
	return 0
}

func (x *UserShare) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

type FileDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash        string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	ToWalletAddress string `protobuf:"bytes,2,opt,name=to_wallet_address,json=toWalletAddress,proto3" json:"to_wallet_address,omitempty"`
	TaskId          string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Time            int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	IssueSP         string `protobuf:"bytes,5,opt,name=issueSP,proto3" json:"issueSP,omitempty"`
}

func (x *FileDownload) Reset() {
	*x = FileDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDownload) ProtoMessage() {}

func (x *FileDownload) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDownload.ProtoReflect.Descriptor instead.
func (*FileDownload) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{12}
}

func (x *FileDownload) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *FileDownload) GetToWalletAddress() string {
	if x != nil {
		return x.ToWalletAddress
	}
	return ""
}

func (x *FileDownload) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *FileDownload) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FileDownload) GetIssueSP() string {
	if x != nil {
		return x.IssueSP
	}
	return ""
}

type FileSliceDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceHash              string `protobuf:"bytes,1,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	FileHash               string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	FromP2PAddress         string `protobuf:"bytes,3,opt,name=from_p2p_address,json=fromP2pAddress,proto3" json:"from_p2p_address,omitempty"`
	FromWalletAddress      string `protobuf:"bytes,4,opt,name=from_wallet_address,json=fromWalletAddress,proto3" json:"from_wallet_address,omitempty"`
	ToP2PAddress           string `protobuf:"bytes,5,opt,name=to_p2p_address,json=toP2pAddress,proto3" json:"to_p2p_address,omitempty"`
	TaskId                 string `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FileTaskId             string `protobuf:"bytes,7,opt,name=file_task_id,json=fileTaskId,proto3" json:"file_task_id,omitempty"`
	Status                 uint32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Time                   int64  `protobuf:"varint,9,opt,name=time,proto3" json:"time,omitempty"`
	IssueSP                string `protobuf:"bytes,10,opt,name=issueSP,proto3" json:"issueSP,omitempty"`
	FromBeneficiaryAddress string `protobuf:"bytes,11,opt,name=from_beneficiary_address,json=fromBeneficiaryAddress,proto3" json:"from_beneficiary_address,omitempty"`
}

func (x *FileSliceDownload) Reset() {
	*x = FileSliceDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSliceDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSliceDownload) ProtoMessage() {}

func (x *FileSliceDownload) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSliceDownload.ProtoReflect.Descriptor instead.
func (*FileSliceDownload) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{13}
}

func (x *FileSliceDownload) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *FileSliceDownload) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *FileSliceDownload) GetFromP2PAddress() string {
	if x != nil {
		return x.FromP2PAddress
	}
	return ""
}

func (x *FileSliceDownload) GetFromWalletAddress() string {
	if x != nil {
		return x.FromWalletAddress
	}
	return ""
}

func (x *FileSliceDownload) GetToP2PAddress() string {
	if x != nil {
		return x.ToP2PAddress
	}
	return ""
}

func (x *FileSliceDownload) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *FileSliceDownload) GetFileTaskId() string {
	if x != nil {
		return x.FileTaskId
	}
	return ""
}

func (x *FileSliceDownload) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FileSliceDownload) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FileSliceDownload) GetIssueSP() string {
	if x != nil {
		return x.IssueSP
	}
	return ""
}

func (x *FileSliceDownload) GetFromBeneficiaryAddress() string {
	if x != nil {
		return x.FromBeneficiaryAddress
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType           uint32 `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	FileHash           string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	ConsumerP2PAddress string `protobuf:"bytes,4,opt,name=consumer_p2p_address,json=consumerP2pAddress,proto3" json:"consumer_p2p_address,omitempty"`
	WalletAddress      string `protobuf:"bytes,5,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Status             uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime         int64  `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	LastUpdateTime     int64  `protobuf:"varint,8,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	OzoneToCharge      uint64 `protobuf:"varint,9,opt,name=ozone_to_charge,json=ozoneToCharge,proto3" json:"ozone_to_charge,omitempty"` // The amount of ozone that needs to be charged for this task. This is charged before the task starts
	OzoneCharged       uint64 `protobuf:"varint,10,opt,name=ozone_charged,json=ozoneCharged,proto3" json:"ozone_charged,omitempty"`     // The amount of ozone accounted for during execution of the task. Ozone may be refunded if this is lower than ozone_to_charge at the end of the task
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{14}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTaskType() uint32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *Task) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *Task) GetConsumerP2PAddress() string {
	if x != nil {
		return x.ConsumerP2PAddress
	}
	return ""
}

func (x *Task) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *Task) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Task) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Task) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *Task) GetOzoneToCharge() uint64 {
	if x != nil {
		return x.OzoneToCharge
	}
	return 0
}

func (x *Task) GetOzoneCharged() uint64 {
	if x != nil {
		return x.OzoneCharged
	}
	return 0
}

type SliceTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType           uint32 `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	FileHash           string `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SliceHash          string `protobuf:"bytes,4,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	ConsumerP2PAddress string `protobuf:"bytes,5,opt,name=consumer_p2p_address,json=consumerP2pAddress,proto3" json:"consumer_p2p_address,omitempty"`
	WalletAddress      string `protobuf:"bytes,6,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Status             uint32 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime         int64  `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	LastUpdateTime     int64  `protobuf:"varint,9,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	OzoneToCharge      uint64 `protobuf:"varint,10,opt,name=ozone_to_charge,json=ozoneToCharge,proto3" json:"ozone_to_charge,omitempty"` // The amount of ozone that needs to be charged for this task. This is charged before the task starts
	OzoneCharged       uint64 `protobuf:"varint,11,opt,name=ozone_charged,json=ozoneCharged,proto3" json:"ozone_charged,omitempty"`      // The amount of ozone accounted for during execution of the task. Ozone may be refunded if this is lower than ozone_to_charge at the end of the task
}

func (x *SliceTask) Reset() {
	*x = SliceTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceTask) ProtoMessage() {}

func (x *SliceTask) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceTask.ProtoReflect.Descriptor instead.
func (*SliceTask) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{15}
}

func (x *SliceTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SliceTask) GetTaskType() uint32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *SliceTask) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *SliceTask) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *SliceTask) GetConsumerP2PAddress() string {
	if x != nil {
		return x.ConsumerP2PAddress
	}
	return ""
}

func (x *SliceTask) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *SliceTask) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SliceTask) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SliceTask) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *SliceTask) GetOzoneToCharge() uint64 {
	if x != nil {
		return x.OzoneToCharge
	}
	return 0
}

func (x *SliceTask) GetOzoneCharged() uint64 {
	if x != nil {
		return x.OzoneCharged
	}
	return 0
}

type BackupTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateHeight           int64              `protobuf:"varint,1,opt,name=create_height,json=createHeight,proto3" json:"create_height,omitempty"`
	UploaderWalletAddress  string             `protobuf:"bytes,2,opt,name=uploader_wallet_address,json=uploaderWalletAddress,proto3" json:"uploader_wallet_address,omitempty"`
	UploaderNetworkAddress string             `protobuf:"bytes,3,opt,name=uploader_network_address,json=uploaderNetworkAddress,proto3" json:"uploader_network_address,omitempty"`
	Type                   uint32             `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	P2PAddress             string             `protobuf:"bytes,5,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	OzoneToCharge          uint64             `protobuf:"varint,6,opt,name=ozone_to_charge,json=ozoneToCharge,proto3" json:"ozone_to_charge,omitempty"`
	FailedSpsP2PAddress    []string           `protobuf:"bytes,7,rep,name=failed_sps_p2p_address,json=failedSpsP2pAddress,proto3" json:"failed_sps_p2p_address,omitempty"`
	CompletedSlices        []*FileSliceBackup `protobuf:"bytes,8,rep,name=completed_slices,json=completedSlices,proto3" json:"completed_slices,omitempty"`
	TransferNextKey        []byte             `protobuf:"bytes,9,opt,name=transfer_next_key,json=transferNextKey,proto3" json:"transfer_next_key,omitempty"`
	TaskIdPadding          string             `protobuf:"bytes,10,opt,name=task_id_padding,json=taskIdPadding,proto3" json:"task_id_padding,omitempty"`
	DesiredTier            uint32             `protobuf:"varint,11,opt,name=desired_tier,json=desiredTier,proto3" json:"desired_tier,omitempty"`
	AllowHigherTier        bool               `protobuf:"varint,12,opt,name=allow_higher_tier,json=allowHigherTier,proto3" json:"allow_higher_tier,omitempty"`
}

func (x *BackupTask) Reset() {
	*x = BackupTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupTask) ProtoMessage() {}

func (x *BackupTask) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupTask.ProtoReflect.Descriptor instead.
func (*BackupTask) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{16}
}

func (x *BackupTask) GetCreateHeight() int64 {
	if x != nil {
		return x.CreateHeight
	}
	return 0
}

func (x *BackupTask) GetUploaderWalletAddress() string {
	if x != nil {
		return x.UploaderWalletAddress
	}
	return ""
}

func (x *BackupTask) GetUploaderNetworkAddress() string {
	if x != nil {
		return x.UploaderNetworkAddress
	}
	return ""
}

func (x *BackupTask) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BackupTask) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *BackupTask) GetOzoneToCharge() uint64 {
	if x != nil {
		return x.OzoneToCharge
	}
	return 0
}

func (x *BackupTask) GetFailedSpsP2PAddress() []string {
	if x != nil {
		return x.FailedSpsP2PAddress
	}
	return nil
}

func (x *BackupTask) GetCompletedSlices() []*FileSliceBackup {
	if x != nil {
		return x.CompletedSlices
	}
	return nil
}

func (x *BackupTask) GetTransferNextKey() []byte {
	if x != nil {
		return x.TransferNextKey
	}
	return nil
}

func (x *BackupTask) GetTaskIdPadding() string {
	if x != nil {
		return x.TaskIdPadding
	}
	return ""
}

func (x *BackupTask) GetDesiredTier() uint32 {
	if x != nil {
		return x.DesiredTier
	}
	return 0
}

func (x *BackupTask) GetAllowHigherTier() bool {
	if x != nil {
		return x.AllowHigherTier
	}
	return false
}

type SliceBackupTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateHeight           int64    `protobuf:"varint,1,opt,name=create_height,json=createHeight,proto3" json:"create_height,omitempty"`
	FromP2PAddress         string   `protobuf:"bytes,2,opt,name=from_p2p_address,json=fromP2pAddress,proto3" json:"from_p2p_address,omitempty"`
	FromNetworkAddress     string   `protobuf:"bytes,3,opt,name=from_network_address,json=fromNetworkAddress,proto3" json:"from_network_address,omitempty"`
	UploaderP2PAddress     string   `protobuf:"bytes,4,opt,name=uploader_p2p_address,json=uploaderP2pAddress,proto3" json:"uploader_p2p_address,omitempty"`
	UploaderWalletAddress  string   `protobuf:"bytes,5,opt,name=uploader_wallet_address,json=uploaderWalletAddress,proto3" json:"uploader_wallet_address,omitempty"`
	UploaderNetworkAddress string   `protobuf:"bytes,6,opt,name=uploader_network_address,json=uploaderNetworkAddress,proto3" json:"uploader_network_address,omitempty"`
	Type                   uint32   `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	OzoneToCharge          uint64   `protobuf:"varint,8,opt,name=ozone_to_charge,json=ozoneToCharge,proto3" json:"ozone_to_charge,omitempty"`
	FailedSpsP2PAddress    []string `protobuf:"bytes,9,rep,name=failed_sps_p2p_address,json=failedSpsP2pAddress,proto3" json:"failed_sps_p2p_address,omitempty"`
	TaskIdPadding          string   `protobuf:"bytes,10,opt,name=task_id_padding,json=taskIdPadding,proto3" json:"task_id_padding,omitempty"`
	DesiredTier            uint32   `protobuf:"varint,11,opt,name=desired_tier,json=desiredTier,proto3" json:"desired_tier,omitempty"`
	AllowHigherTier        bool     `protobuf:"varint,12,opt,name=allow_higher_tier,json=allowHigherTier,proto3" json:"allow_higher_tier,omitempty"`
}

func (x *SliceBackupTask) Reset() {
	*x = SliceBackupTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceBackupTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceBackupTask) ProtoMessage() {}

func (x *SliceBackupTask) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceBackupTask.ProtoReflect.Descriptor instead.
func (*SliceBackupTask) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{17}
}

func (x *SliceBackupTask) GetCreateHeight() int64 {
	if x != nil {
		return x.CreateHeight
	}
	return 0
}

func (x *SliceBackupTask) GetFromP2PAddress() string {
	if x != nil {
		return x.FromP2PAddress
	}
	return ""
}

func (x *SliceBackupTask) GetFromNetworkAddress() string {
	if x != nil {
		return x.FromNetworkAddress
	}
	return ""
}

func (x *SliceBackupTask) GetUploaderP2PAddress() string {
	if x != nil {
		return x.UploaderP2PAddress
	}
	return ""
}

func (x *SliceBackupTask) GetUploaderWalletAddress() string {
	if x != nil {
		return x.UploaderWalletAddress
	}
	return ""
}

func (x *SliceBackupTask) GetUploaderNetworkAddress() string {
	if x != nil {
		return x.UploaderNetworkAddress
	}
	return ""
}

func (x *SliceBackupTask) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SliceBackupTask) GetOzoneToCharge() uint64 {
	if x != nil {
		return x.OzoneToCharge
	}
	return 0
}

func (x *SliceBackupTask) GetFailedSpsP2PAddress() []string {
	if x != nil {
		return x.FailedSpsP2PAddress
	}
	return nil
}

func (x *SliceBackupTask) GetTaskIdPadding() string {
	if x != nil {
		return x.TaskIdPadding
	}
	return ""
}

func (x *SliceBackupTask) GetDesiredTier() uint32 {
	if x != nil {
		return x.DesiredTier
	}
	return 0
}

func (x *SliceBackupTask) GetAllowHigherTier() bool {
	if x != nil {
		return x.AllowHigherTier
	}
	return false
}

type FileSliceBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceHash          string `protobuf:"bytes,1,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	SliceSize          uint64 `protobuf:"varint,2,opt,name=slice_size,json=sliceSize,proto3" json:"slice_size,omitempty"`
	SliceNumber        uint64 `protobuf:"varint,3,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	Time               int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	FromP2PAddress     string `protobuf:"bytes,5,opt,name=from_p2p_address,json=fromP2pAddress,proto3" json:"from_p2p_address,omitempty"`
	FromNetworkAddress string `protobuf:"bytes,6,opt,name=from_network_address,json=fromNetworkAddress,proto3" json:"from_network_address,omitempty"`
	ToP2PAddress       string `protobuf:"bytes,7,opt,name=to_p2p_address,json=toP2pAddress,proto3" json:"to_p2p_address,omitempty"`
	ToNetworkAddress   string `protobuf:"bytes,8,opt,name=to_network_address,json=toNetworkAddress,proto3" json:"to_network_address,omitempty"`
}

func (x *FileSliceBackup) Reset() {
	*x = FileSliceBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSliceBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSliceBackup) ProtoMessage() {}

func (x *FileSliceBackup) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSliceBackup.ProtoReflect.Descriptor instead.
func (*FileSliceBackup) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{18}
}

func (x *FileSliceBackup) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *FileSliceBackup) GetSliceSize() uint64 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

func (x *FileSliceBackup) GetSliceNumber() uint64 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

func (x *FileSliceBackup) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FileSliceBackup) GetFromP2PAddress() string {
	if x != nil {
		return x.FromP2PAddress
	}
	return ""
}

func (x *FileSliceBackup) GetFromNetworkAddress() string {
	if x != nil {
		return x.FromNetworkAddress
	}
	return ""
}

func (x *FileSliceBackup) GetToP2PAddress() string {
	if x != nil {
		return x.ToP2PAddress
	}
	return ""
}

func (x *FileSliceBackup) GetToNetworkAddress() string {
	if x != nil {
		return x.ToNetworkAddress
	}
	return ""
}

type AutoScaleParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StandardDuration      uint64  `protobuf:"varint,1,opt,name=standard_duration,json=standardDuration,proto3" json:"standard_duration,omitempty"`
	ProtectionDuration    uint64  `protobuf:"varint,2,opt,name=protection_duration,json=protectionDuration,proto3" json:"protection_duration,omitempty"`
	ProtectionCount       uint64  `protobuf:"varint,3,opt,name=protection_count,json=protectionCount,proto3" json:"protection_count,omitempty"`
	FhtUpScaleThreshold   uint64  `protobuf:"varint,4,opt,name=fht_up_scale_threshold,json=fhtUpScaleThreshold,proto3" json:"fht_up_scale_threshold,omitempty"`
	FhlDownScaleThreshold float64 `protobuf:"fixed64,5,opt,name=fhl_down_scale_threshold,json=fhlDownScaleThreshold,proto3" json:"fhl_down_scale_threshold,omitempty"`
	FhlFhtRatioThreshold  float64 `protobuf:"fixed64,6,opt,name=fhl_fht_ratio_threshold,json=fhlFhtRatioThreshold,proto3" json:"fhl_fht_ratio_threshold,omitempty"`
	GlobalMinReplicas     uint32  `protobuf:"varint,7,opt,name=global_min_replicas,json=globalMinReplicas,proto3" json:"global_min_replicas,omitempty"`
	IdleDownscaleWindow   int64   `protobuf:"varint,8,opt,name=idle_downscale_window,json=idleDownscaleWindow,proto3" json:"idle_downscale_window,omitempty"`
	FhtDownScaleThreshold float64 `protobuf:"fixed64,9,opt,name=fht_down_scale_threshold,json=fhtDownScaleThreshold,proto3" json:"fht_down_scale_threshold,omitempty"`
	DefaultReplicas       uint32  `protobuf:"varint,10,opt,name=default_replicas,json=defaultReplicas,proto3" json:"default_replicas,omitempty"`
}

func (x *AutoScaleParams) Reset() {
	*x = AutoScaleParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScaleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScaleParams) ProtoMessage() {}

func (x *AutoScaleParams) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScaleParams.ProtoReflect.Descriptor instead.
func (*AutoScaleParams) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{19}
}

func (x *AutoScaleParams) GetStandardDuration() uint64 {
	if x != nil {
		return x.StandardDuration
	}
	return 0
}

func (x *AutoScaleParams) GetProtectionDuration() uint64 {
	if x != nil {
		return x.ProtectionDuration
	}
	return 0
}

func (x *AutoScaleParams) GetProtectionCount() uint64 {
	if x != nil {
		return x.ProtectionCount
	}
	return 0
}

func (x *AutoScaleParams) GetFhtUpScaleThreshold() uint64 {
	if x != nil {
		return x.FhtUpScaleThreshold
	}
	return 0
}

func (x *AutoScaleParams) GetFhlDownScaleThreshold() float64 {
	if x != nil {
		return x.FhlDownScaleThreshold
	}
	return 0
}

func (x *AutoScaleParams) GetFhlFhtRatioThreshold() float64 {
	if x != nil {
		return x.FhlFhtRatioThreshold
	}
	return 0
}

func (x *AutoScaleParams) GetGlobalMinReplicas() uint32 {
	if x != nil {
		return x.GlobalMinReplicas
	}
	return 0
}

func (x *AutoScaleParams) GetIdleDownscaleWindow() int64 {
	if x != nil {
		return x.IdleDownscaleWindow
	}
	return 0
}

func (x *AutoScaleParams) GetFhtDownScaleThreshold() float64 {
	if x != nil {
		return x.FhtDownScaleThreshold
	}
	return 0
}

func (x *AutoScaleParams) GetDefaultReplicas() uint32 {
	if x != nil {
		return x.DefaultReplicas
	}
	return 0
}

type PPTierWeightParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeightScoreUpperBound     uint32                   `protobuf:"varint,1,opt,name=weight_score_upper_bound,json=weightScoreUpperBound,proto3" json:"weight_score_upper_bound,omitempty"`
	WeightScoreLowerBound     uint32                   `protobuf:"varint,2,opt,name=weight_score_lower_bound,json=weightScoreLowerBound,proto3" json:"weight_score_lower_bound,omitempty"`
	NodeTierUpperBound        uint32                   `protobuf:"varint,3,opt,name=node_tier_upper_bound,json=nodeTierUpperBound,proto3" json:"node_tier_upper_bound,omitempty"`
	NodeTierLowerBound        uint32                   `protobuf:"varint,4,opt,name=node_tier_lower_bound,json=nodeTierLowerBound,proto3" json:"node_tier_lower_bound,omitempty"`
	InitWeightScoreStart      uint32                   `protobuf:"varint,5,opt,name=init_weight_score_start,json=initWeightScoreStart,proto3" json:"init_weight_score_start,omitempty"`
	UpgradeWeightScoreStart   uint32                   `protobuf:"varint,6,opt,name=upgrade_weight_score_start,json=upgradeWeightScoreStart,proto3" json:"upgrade_weight_score_start,omitempty"`
	DowngradeWeightScoreStart uint32                   `protobuf:"varint,7,opt,name=downgrade_weight_score_start,json=downgradeWeightScoreStart,proto3" json:"downgrade_weight_score_start,omitempty"`
	WeightIncrEventStep       []*PPWeightIncrEventStep `protobuf:"bytes,8,rep,name=weight_incr_event_step,json=weightIncrEventStep,proto3" json:"weight_incr_event_step,omitempty"`
	WeightDecrEventStep       []*PPWeightDecrEventStep `protobuf:"bytes,9,rep,name=weight_decr_event_step,json=weightDecrEventStep,proto3" json:"weight_decr_event_step,omitempty"`
	MinDepositTier1           string                   `protobuf:"bytes,10,opt,name=min_deposit_tier1,json=minDepositTier1,proto3" json:"min_deposit_tier1,omitempty"`
	MinDepositTier2           string                   `protobuf:"bytes,11,opt,name=min_deposit_tier2,json=minDepositTier2,proto3" json:"min_deposit_tier2,omitempty"`
	MinDepositTier3           string                   `protobuf:"bytes,12,opt,name=min_deposit_tier3,json=minDepositTier3,proto3" json:"min_deposit_tier3,omitempty"`
	// Deprecated: Marked as deprecated in store.proto.
	StatusCheckBaseInterval              uint32  `protobuf:"varint,13,opt,name=status_check_base_interval,json=statusCheckBaseInterval,proto3" json:"status_check_base_interval,omitempty"` // Replaced by HeightParams.status_check_base_interval
	MinUploadTaskScore                   uint32  `protobuf:"varint,14,opt,name=min_upload_task_score,json=minUploadTaskScore,proto3" json:"min_upload_task_score,omitempty"`
	MinDownloadTaskScore                 uint32  `protobuf:"varint,15,opt,name=min_download_task_score,json=minDownloadTaskScore,proto3" json:"min_download_task_score,omitempty"`
	StatusCheckToleranceMultiplier       uint32  `protobuf:"varint,16,opt,name=status_check_tolerance_multiplier,json=statusCheckToleranceMultiplier,proto3" json:"status_check_tolerance_multiplier,omitempty"`
	StatusCheckIntervalMultiplier        uint32  `protobuf:"varint,17,opt,name=status_check_interval_multiplier,json=statusCheckIntervalMultiplier,proto3" json:"status_check_interval_multiplier,omitempty"`
	StatusCheckDirectDowngradeMultiplier uint32  `protobuf:"varint,18,opt,name=status_check_direct_downgrade_multiplier,json=statusCheckDirectDowngradeMultiplier,proto3" json:"status_check_direct_downgrade_multiplier,omitempty"`
	MinUnsuspendDeposit                  string  `protobuf:"bytes,19,opt,name=min_unsuspend_deposit,json=minUnsuspendDeposit,proto3" json:"min_unsuspend_deposit,omitempty"`
	MinInboundSpeedTier1                 string  `protobuf:"bytes,20,opt,name=min_inbound_speed_tier1,json=minInboundSpeedTier1,proto3" json:"min_inbound_speed_tier1,omitempty"`
	MinInboundSpeedTier2                 string  `protobuf:"bytes,21,opt,name=min_inbound_speed_tier2,json=minInboundSpeedTier2,proto3" json:"min_inbound_speed_tier2,omitempty"`
	MinInboundSpeedTier3                 string  `protobuf:"bytes,22,opt,name=min_inbound_speed_tier3,json=minInboundSpeedTier3,proto3" json:"min_inbound_speed_tier3,omitempty"`
	MinOutboundSpeedTier1                string  `protobuf:"bytes,23,opt,name=min_outbound_speed_tier1,json=minOutboundSpeedTier1,proto3" json:"min_outbound_speed_tier1,omitempty"`
	MinOutboundSpeedTier2                string  `protobuf:"bytes,24,opt,name=min_outbound_speed_tier2,json=minOutboundSpeedTier2,proto3" json:"min_outbound_speed_tier2,omitempty"`
	MinOutboundSpeedTier3                string  `protobuf:"bytes,25,opt,name=min_outbound_speed_tier3,json=minOutboundSpeedTier3,proto3" json:"min_outbound_speed_tier3,omitempty"`
	OzoneCostMultiplierTier1             float64 `protobuf:"fixed64,26,opt,name=ozone_cost_multiplier_tier1,json=ozoneCostMultiplierTier1,proto3" json:"ozone_cost_multiplier_tier1,omitempty"`
	OzoneCostMultiplierTier2             float64 `protobuf:"fixed64,27,opt,name=ozone_cost_multiplier_tier2,json=ozoneCostMultiplierTier2,proto3" json:"ozone_cost_multiplier_tier2,omitempty"`
	OzoneCostMultiplierTier3             float64 `protobuf:"fixed64,28,opt,name=ozone_cost_multiplier_tier3,json=ozoneCostMultiplierTier3,proto3" json:"ozone_cost_multiplier_tier3,omitempty"`
	MinUnsuspendDepositLimit             string  `protobuf:"bytes,29,opt,name=min_unsuspend_deposit_limit,json=minUnsuspendDepositLimit,proto3" json:"min_unsuspend_deposit_limit,omitempty"`
	IncreaseMinUnsuspendDeposit          bool    `protobuf:"varint,30,opt,name=increase_min_unsuspend_deposit,json=increaseMinUnsuspendDeposit,proto3" json:"increase_min_unsuspend_deposit,omitempty"`
	NewNodesNeedVerification             bool    `protobuf:"varint,31,opt,name=new_nodes_need_verification,json=newNodesNeedVerification,proto3" json:"new_nodes_need_verification,omitempty"`
}

func (x *PPTierWeightParams) Reset() {
	*x = PPTierWeightParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPTierWeightParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPTierWeightParams) ProtoMessage() {}

func (x *PPTierWeightParams) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPTierWeightParams.ProtoReflect.Descriptor instead.
func (*PPTierWeightParams) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{20}
}

func (x *PPTierWeightParams) GetWeightScoreUpperBound() uint32 {
	if x != nil {
		return x.WeightScoreUpperBound
	}
	return 0
}

func (x *PPTierWeightParams) GetWeightScoreLowerBound() uint32 {
	if x != nil {
		return x.WeightScoreLowerBound
	}
	return 0
}

func (x *PPTierWeightParams) GetNodeTierUpperBound() uint32 {
	if x != nil {
		return x.NodeTierUpperBound
	}
	return 0
}

func (x *PPTierWeightParams) GetNodeTierLowerBound() uint32 {
	if x != nil {
		return x.NodeTierLowerBound
	}
	return 0
}

func (x *PPTierWeightParams) GetInitWeightScoreStart() uint32 {
	if x != nil {
		return x.InitWeightScoreStart
	}
	return 0
}

func (x *PPTierWeightParams) GetUpgradeWeightScoreStart() uint32 {
	if x != nil {
		return x.UpgradeWeightScoreStart
	}
	return 0
}

func (x *PPTierWeightParams) GetDowngradeWeightScoreStart() uint32 {
	if x != nil {
		return x.DowngradeWeightScoreStart
	}
	return 0
}

func (x *PPTierWeightParams) GetWeightIncrEventStep() []*PPWeightIncrEventStep {
	if x != nil {
		return x.WeightIncrEventStep
	}
	return nil
}

func (x *PPTierWeightParams) GetWeightDecrEventStep() []*PPWeightDecrEventStep {
	if x != nil {
		return x.WeightDecrEventStep
	}
	return nil
}

func (x *PPTierWeightParams) GetMinDepositTier1() string {
	if x != nil {
		return x.MinDepositTier1
	}
	return ""
}

func (x *PPTierWeightParams) GetMinDepositTier2() string {
	if x != nil {
		return x.MinDepositTier2
	}
	return ""
}

func (x *PPTierWeightParams) GetMinDepositTier3() string {
	if x != nil {
		return x.MinDepositTier3
	}
	return ""
}

// Deprecated: Marked as deprecated in store.proto.
func (x *PPTierWeightParams) GetStatusCheckBaseInterval() uint32 {
	if x != nil {
		return x.StatusCheckBaseInterval
	}
	return 0
}

func (x *PPTierWeightParams) GetMinUploadTaskScore() uint32 {
	if x != nil {
		return x.MinUploadTaskScore
	}
	return 0
}

func (x *PPTierWeightParams) GetMinDownloadTaskScore() uint32 {
	if x != nil {
		return x.MinDownloadTaskScore
	}
	return 0
}

func (x *PPTierWeightParams) GetStatusCheckToleranceMultiplier() uint32 {
	if x != nil {
		return x.StatusCheckToleranceMultiplier
	}
	return 0
}

func (x *PPTierWeightParams) GetStatusCheckIntervalMultiplier() uint32 {
	if x != nil {
		return x.StatusCheckIntervalMultiplier
	}
	return 0
}

func (x *PPTierWeightParams) GetStatusCheckDirectDowngradeMultiplier() uint32 {
	if x != nil {
		return x.StatusCheckDirectDowngradeMultiplier
	}
	return 0
}

func (x *PPTierWeightParams) GetMinUnsuspendDeposit() string {
	if x != nil {
		return x.MinUnsuspendDeposit
	}
	return ""
}

func (x *PPTierWeightParams) GetMinInboundSpeedTier1() string {
	if x != nil {
		return x.MinInboundSpeedTier1
	}
	return ""
}

func (x *PPTierWeightParams) GetMinInboundSpeedTier2() string {
	if x != nil {
		return x.MinInboundSpeedTier2
	}
	return ""
}

func (x *PPTierWeightParams) GetMinInboundSpeedTier3() string {
	if x != nil {
		return x.MinInboundSpeedTier3
	}
	return ""
}

func (x *PPTierWeightParams) GetMinOutboundSpeedTier1() string {
	if x != nil {
		return x.MinOutboundSpeedTier1
	}
	return ""
}

func (x *PPTierWeightParams) GetMinOutboundSpeedTier2() string {
	if x != nil {
		return x.MinOutboundSpeedTier2
	}
	return ""
}

func (x *PPTierWeightParams) GetMinOutboundSpeedTier3() string {
	if x != nil {
		return x.MinOutboundSpeedTier3
	}
	return ""
}

func (x *PPTierWeightParams) GetOzoneCostMultiplierTier1() float64 {
	if x != nil {
		return x.OzoneCostMultiplierTier1
	}
	return 0
}

func (x *PPTierWeightParams) GetOzoneCostMultiplierTier2() float64 {
	if x != nil {
		return x.OzoneCostMultiplierTier2
	}
	return 0
}

func (x *PPTierWeightParams) GetOzoneCostMultiplierTier3() float64 {
	if x != nil {
		return x.OzoneCostMultiplierTier3
	}
	return 0
}

func (x *PPTierWeightParams) GetMinUnsuspendDepositLimit() string {
	if x != nil {
		return x.MinUnsuspendDepositLimit
	}
	return ""
}

func (x *PPTierWeightParams) GetIncreaseMinUnsuspendDeposit() bool {
	if x != nil {
		return x.IncreaseMinUnsuspendDeposit
	}
	return false
}

func (x *PPTierWeightParams) GetNewNodesNeedVerification() bool {
	if x != nil {
		return x.NewNodesNeedVerification
	}
	return false
}

type PPWeightIncrEventStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event PPWeightIncrEvent `protobuf:"varint,1,opt,name=event,proto3,enum=protos.PPWeightIncrEvent" json:"event,omitempty"`
	Step  uint32            `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *PPWeightIncrEventStep) Reset() {
	*x = PPWeightIncrEventStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPWeightIncrEventStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPWeightIncrEventStep) ProtoMessage() {}

func (x *PPWeightIncrEventStep) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPWeightIncrEventStep.ProtoReflect.Descriptor instead.
func (*PPWeightIncrEventStep) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{21}
}

func (x *PPWeightIncrEventStep) GetEvent() PPWeightIncrEvent {
	if x != nil {
		return x.Event
	}
	return PPWeightIncrEvent_UPLOAD_SUCCESS
}

func (x *PPWeightIncrEventStep) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type PPWeightDecrEventStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event PPWeightDecrEvent `protobuf:"varint,1,opt,name=event,proto3,enum=protos.PPWeightDecrEvent" json:"event,omitempty"`
	Step  uint32            `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *PPWeightDecrEventStep) Reset() {
	*x = PPWeightDecrEventStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPWeightDecrEventStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPWeightDecrEventStep) ProtoMessage() {}

func (x *PPWeightDecrEventStep) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPWeightDecrEventStep.ProtoReflect.Descriptor instead.
func (*PPWeightDecrEventStep) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{22}
}

func (x *PPWeightDecrEventStep) GetEvent() PPWeightDecrEvent {
	if x != nil {
		return x.Event
	}
	return PPWeightDecrEvent_UPLOAD_FAIL
}

func (x *PPWeightDecrEventStep) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type TierChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          TierChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=protos.TierChangeType" json:"type,omitempty"`
	P2PAddressPp  string         `protobuf:"bytes,2,opt,name=p2p_address_pp,json=p2pAddressPp,proto3" json:"p2p_address_pp,omitempty"`
	WalletAddress string         `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	TierAfter     string         `protobuf:"bytes,4,opt,name=tier_after,json=tierAfter,proto3" json:"tier_after,omitempty"`
	P2PAddressSp  string         `protobuf:"bytes,5,opt,name=p2p_address_sp,json=p2pAddressSp,proto3" json:"p2p_address_sp,omitempty"`
}

func (x *TierChange) Reset() {
	*x = TierChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TierChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TierChange) ProtoMessage() {}

func (x *TierChange) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TierChange.ProtoReflect.Descriptor instead.
func (*TierChange) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{23}
}

func (x *TierChange) GetType() TierChangeType {
	if x != nil {
		return x.Type
	}
	return TierChangeType_UPGRADED
}

func (x *TierChange) GetP2PAddressPp() string {
	if x != nil {
		return x.P2PAddressPp
	}
	return ""
}

func (x *TierChange) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *TierChange) GetTierAfter() string {
	if x != nil {
		return x.TierAfter
	}
	return ""
}

func (x *TierChange) GetP2PAddressSp() string {
	if x != nil {
		return x.P2PAddressSp
	}
	return ""
}

type TierChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*TierChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *TierChanges) Reset() {
	*x = TierChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TierChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TierChanges) ProtoMessage() {}

func (x *TierChanges) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TierChanges.ProtoReflect.Descriptor instead.
func (*TierChanges) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{24}
}

func (x *TierChanges) GetChanges() []*TierChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type IndexingNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress     []byte `protobuf:"bytes,1,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	P2PPubkey      []byte `protobuf:"bytes,2,opt,name=p2p_pubkey,json=p2pPubkey,proto3" json:"p2p_pubkey,omitempty"`
	OwnerAddress   []byte `protobuf:"bytes,3,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	NetworkAddress string `protobuf:"bytes,4,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
	ActiveState    bool   `protobuf:"varint,5,opt,name=active_state,json=activeState,proto3" json:"active_state,omitempty"`
	Connection     uint32 `protobuf:"varint,6,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *IndexingNode) Reset() {
	*x = IndexingNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexingNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexingNode) ProtoMessage() {}

func (x *IndexingNode) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexingNode.ProtoReflect.Descriptor instead.
func (*IndexingNode) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{25}
}

func (x *IndexingNode) GetP2PAddress() []byte {
	if x != nil {
		return x.P2PAddress
	}
	return nil
}

func (x *IndexingNode) GetP2PPubkey() []byte {
	if x != nil {
		return x.P2PPubkey
	}
	return nil
}

func (x *IndexingNode) GetOwnerAddress() []byte {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

func (x *IndexingNode) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

func (x *IndexingNode) GetActiveState() bool {
	if x != nil {
		return x.ActiveState
	}
	return false
}

func (x *IndexingNode) GetConnection() uint32 {
	if x != nil {
		return x.Connection
	}
	return 0
}

type HashRingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualNodeNum uint32 `protobuf:"varint,1,opt,name=virtual_node_num,json=virtualNodeNum,proto3" json:"virtual_node_num,omitempty"`
}

func (x *HashRingParams) Reset() {
	*x = HashRingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashRingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashRingParams) ProtoMessage() {}

func (x *HashRingParams) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashRingParams.ProtoReflect.Descriptor instead.
func (*HashRingParams) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{26}
}

func (x *HashRingParams) GetVirtualNodeNum() uint32 {
	if x != nil {
		return x.VirtualNodeNum
	}
	return 0
}

type FileStorageParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceBlockSize   uint64 `protobuf:"varint,1,opt,name=slice_block_size,json=sliceBlockSize,proto3" json:"slice_block_size,omitempty"`
	HlsSegmentBuffer uint64 `protobuf:"varint,2,opt,name=hls_segment_buffer,json=hlsSegmentBuffer,proto3" json:"hls_segment_buffer,omitempty"`
	HlsSegmentLength uint64 `protobuf:"varint,3,opt,name=hls_segment_length,json=hlsSegmentLength,proto3" json:"hls_segment_length,omitempty"`
}

func (x *FileStorageParams) Reset() {
	*x = FileStorageParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileStorageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStorageParams) ProtoMessage() {}

func (x *FileStorageParams) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStorageParams.ProtoReflect.Descriptor instead.
func (*FileStorageParams) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{27}
}

func (x *FileStorageParams) GetSliceBlockSize() uint64 {
	if x != nil {
		return x.SliceBlockSize
	}
	return 0
}

func (x *FileStorageParams) GetHlsSegmentBuffer() uint64 {
	if x != nil {
		return x.HlsSegmentBuffer
	}
	return 0
}

func (x *FileStorageParams) GetHlsSegmentLength() uint64 {
	if x != nil {
		return x.HlsSegmentLength
	}
	return 0
}

type PPHwRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HdRequirementTier1  uint64 `protobuf:"varint,1,opt,name=hd_requirement_tier1,json=hdRequirementTier1,proto3" json:"hd_requirement_tier1,omitempty"`
	HdRequirementTier2  uint64 `protobuf:"varint,2,opt,name=hd_requirement_tier2,json=hdRequirementTier2,proto3" json:"hd_requirement_tier2,omitempty"`
	HdRequirementTier3  uint64 `protobuf:"varint,3,opt,name=hd_requirement_tier3,json=hdRequirementTier3,proto3" json:"hd_requirement_tier3,omitempty"`
	RamRequirementTier1 uint64 `protobuf:"varint,4,opt,name=ram_requirement_tier1,json=ramRequirementTier1,proto3" json:"ram_requirement_tier1,omitempty"`
	RamRequirementTier2 uint64 `protobuf:"varint,5,opt,name=ram_requirement_tier2,json=ramRequirementTier2,proto3" json:"ram_requirement_tier2,omitempty"`
	RamRequirementTier3 uint64 `protobuf:"varint,6,opt,name=ram_requirement_tier3,json=ramRequirementTier3,proto3" json:"ram_requirement_tier3,omitempty"`
}

func (x *PPHwRequirement) Reset() {
	*x = PPHwRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPHwRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPHwRequirement) ProtoMessage() {}

func (x *PPHwRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPHwRequirement.ProtoReflect.Descriptor instead.
func (*PPHwRequirement) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{28}
}

func (x *PPHwRequirement) GetHdRequirementTier1() uint64 {
	if x != nil {
		return x.HdRequirementTier1
	}
	return 0
}

func (x *PPHwRequirement) GetHdRequirementTier2() uint64 {
	if x != nil {
		return x.HdRequirementTier2
	}
	return 0
}

func (x *PPHwRequirement) GetHdRequirementTier3() uint64 {
	if x != nil {
		return x.HdRequirementTier3
	}
	return 0
}

func (x *PPHwRequirement) GetRamRequirementTier1() uint64 {
	if x != nil {
		return x.RamRequirementTier1
	}
	return 0
}

func (x *PPHwRequirement) GetRamRequirementTier2() uint64 {
	if x != nil {
		return x.RamRequirementTier2
	}
	return 0
}

func (x *PPHwRequirement) GetRamRequirementTier3() uint64 {
	if x != nil {
		return x.RamRequirementTier3
	}
	return 0
}

type RewardsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareDownloadLoyaltyRatio uint64 `protobuf:"varint,1,opt,name=share_download_loyalty_ratio,json=shareDownloadLoyaltyRatio,proto3" json:"share_download_loyalty_ratio,omitempty"` // Proportion of a file download traffic that is awarded to the share link creator, in basis points (100=1%)
}

func (x *RewardsParams) Reset() {
	*x = RewardsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsParams) ProtoMessage() {}

func (x *RewardsParams) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsParams.ProtoReflect.Descriptor instead.
func (*RewardsParams) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{29}
}

func (x *RewardsParams) GetShareDownloadLoyaltyRatio() uint64 {
	if x != nil {
		return x.ShareDownloadLoyaltyRatio
	}
	return 0
}

type VolumeReportParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval  uint64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	StartTime uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *VolumeReportParams) Reset() {
	*x = VolumeReportParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeReportParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeReportParams) ProtoMessage() {}

func (x *VolumeReportParams) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeReportParams.ProtoReflect.Descriptor instead.
func (*VolumeReportParams) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{30}
}

func (x *VolumeReportParams) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *VolumeReportParams) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type HeightParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCheckBaseInterval     uint64 `protobuf:"varint,1,opt,name=status_check_base_interval,json=statusCheckBaseInterval,proto3" json:"status_check_base_interval,omitempty"`
	TxReportExpiryCheckInterval uint64 `protobuf:"varint,2,opt,name=tx_report_expiry_check_interval,json=txReportExpiryCheckInterval,proto3" json:"tx_report_expiry_check_interval,omitempty"`
	MinMaintenanceInterval      uint64 `protobuf:"varint,3,opt,name=min_maintenance_interval,json=minMaintenanceInterval,proto3" json:"min_maintenance_interval,omitempty"`
	SpamCheckRegister           uint64 `protobuf:"varint,4,opt,name=spam_check_register,json=spamCheckRegister,proto3" json:"spam_check_register,omitempty"`
	SpamCheckNodeStatusPp       uint64 `protobuf:"varint,5,opt,name=spam_check_node_status_pp,json=spamCheckNodeStatusPp,proto3" json:"spam_check_node_status_pp,omitempty"`
}

func (x *HeightParams) Reset() {
	*x = HeightParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeightParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeightParams) ProtoMessage() {}

func (x *HeightParams) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeightParams.ProtoReflect.Descriptor instead.
func (*HeightParams) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{31}
}

func (x *HeightParams) GetStatusCheckBaseInterval() uint64 {
	if x != nil {
		return x.StatusCheckBaseInterval
	}
	return 0
}

func (x *HeightParams) GetTxReportExpiryCheckInterval() uint64 {
	if x != nil {
		return x.TxReportExpiryCheckInterval
	}
	return 0
}

func (x *HeightParams) GetMinMaintenanceInterval() uint64 {
	if x != nil {
		return x.MinMaintenanceInterval
	}
	return 0
}

func (x *HeightParams) GetSpamCheckRegister() uint64 {
	if x != nil {
		return x.SpamCheckRegister
	}
	return 0
}

func (x *HeightParams) GetSpamCheckNodeStatusPp() uint64 {
	if x != nil {
		return x.SpamCheckNodeStatusPp
	}
	return 0
}

type FslStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadTotalCnt   uint64 `protobuf:"varint,1,opt,name=download_total_cnt,json=downloadTotalCnt,proto3" json:"download_total_cnt,omitempty"`
	DownloadFailureCnt uint64 `protobuf:"varint,2,opt,name=download_failure_cnt,json=downloadFailureCnt,proto3" json:"download_failure_cnt,omitempty"`
}

func (x *FslStat) Reset() {
	*x = FslStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FslStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FslStat) ProtoMessage() {}

func (x *FslStat) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FslStat.ProtoReflect.Descriptor instead.
func (*FslStat) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{32}
}

func (x *FslStat) GetDownloadTotalCnt() uint64 {
	if x != nil {
		return x.DownloadTotalCnt
	}
	return 0
}

func (x *FslStat) GetDownloadFailureCnt() uint64 {
	if x != nil {
		return x.DownloadFailureCnt
	}
	return 0
}

type FslStatEntryToAppend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash           string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SliceHash          string `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	P2PAddress         string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	SuccessCntToAppend uint32 `protobuf:"varint,4,opt,name=success_cnt_to_append,json=successCntToAppend,proto3" json:"success_cnt_to_append,omitempty"`
	FailureCntToAppend uint32 `protobuf:"varint,5,opt,name=failure_cnt_to_append,json=failureCntToAppend,proto3" json:"failure_cnt_to_append,omitempty"`
}

func (x *FslStatEntryToAppend) Reset() {
	*x = FslStatEntryToAppend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FslStatEntryToAppend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FslStatEntryToAppend) ProtoMessage() {}

func (x *FslStatEntryToAppend) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FslStatEntryToAppend.ProtoReflect.Descriptor instead.
func (*FslStatEntryToAppend) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{33}
}

func (x *FslStatEntryToAppend) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *FslStatEntryToAppend) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *FslStatEntryToAppend) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *FslStatEntryToAppend) GetSuccessCntToAppend() uint32 {
	if x != nil {
		return x.SuccessCntToAppend
	}
	return 0
}

func (x *FslStatEntryToAppend) GetFailureCntToAppend() uint32 {
	if x != nil {
		return x.FailureCntToAppend
	}
	return 0
}

type FslWithStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash  string      `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	SliceHash string      `protobuf:"bytes,2,opt,name=slice_hash,json=sliceHash,proto3" json:"slice_hash,omitempty"`
	PpNode    *PPNodeInfo `protobuf:"bytes,3,opt,name=pp_node,json=ppNode,proto3" json:"pp_node,omitempty"`
	FslStat   *FslStat    `protobuf:"bytes,4,opt,name=fsl_stat,json=fslStat,proto3" json:"fsl_stat,omitempty"`
}

func (x *FslWithStat) Reset() {
	*x = FslWithStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FslWithStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FslWithStat) ProtoMessage() {}

func (x *FslWithStat) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FslWithStat.ProtoReflect.Descriptor instead.
func (*FslWithStat) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{34}
}

func (x *FslWithStat) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *FslWithStat) GetSliceHash() string {
	if x != nil {
		return x.SliceHash
	}
	return ""
}

func (x *FslWithStat) GetPpNode() *PPNodeInfo {
	if x != nil {
		return x.PpNode
	}
	return nil
}

func (x *FslWithStat) GetFslStat() *FslStat {
	if x != nil {
		return x.FslStat
	}
	return nil
}

type ScoreUpdateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncreaseThreshold uint64 `protobuf:"varint,1,opt,name=increase_threshold,json=increaseThreshold,proto3" json:"increase_threshold,omitempty"`
	DecreaseThreshold uint64 `protobuf:"varint,2,opt,name=decrease_threshold,json=decreaseThreshold,proto3" json:"decrease_threshold,omitempty"`
	UpdateInterval    uint64 `protobuf:"varint,3,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
}

func (x *ScoreUpdateParams) Reset() {
	*x = ScoreUpdateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreUpdateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreUpdateParams) ProtoMessage() {}

func (x *ScoreUpdateParams) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreUpdateParams.ProtoReflect.Descriptor instead.
func (*ScoreUpdateParams) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{35}
}

func (x *ScoreUpdateParams) GetIncreaseThreshold() uint64 {
	if x != nil {
		return x.IncreaseThreshold
	}
	return 0
}

func (x *ScoreUpdateParams) GetDecreaseThreshold() uint64 {
	if x != nil {
		return x.DecreaseThreshold
	}
	return 0
}

func (x *ScoreUpdateParams) GetUpdateInterval() uint64 {
	if x != nil {
		return x.UpdateInterval
	}
	return 0
}

type TrustedWhitelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PAddress []string `protobuf:"bytes,1,rep,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
}

func (x *TrustedWhitelist) Reset() {
	*x = TrustedWhitelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustedWhitelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedWhitelist) ProtoMessage() {}

func (x *TrustedWhitelist) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedWhitelist.ProtoReflect.Descriptor instead.
func (*TrustedWhitelist) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{36}
}

func (x *TrustedWhitelist) GetP2PAddress() []string {
	if x != nil {
		return x.P2PAddress
	}
	return nil
}

type SdsLinker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalCid string `protobuf:"bytes,1,opt,name=original_cid,json=originalCid,proto3" json:"original_cid,omitempty"`
	SdsFileHash string `protobuf:"bytes,2,opt,name=sds_file_hash,json=sdsFileHash,proto3" json:"sds_file_hash,omitempty"`
}

func (x *SdsLinker) Reset() {
	*x = SdsLinker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdsLinker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdsLinker) ProtoMessage() {}

func (x *SdsLinker) ProtoReflect() protoreflect.Message {
	mi := &file_store_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdsLinker.ProtoReflect.Descriptor instead.
func (*SdsLinker) Descriptor() ([]byte, []int) {
	return file_store_proto_rawDescGZIP(), []int{37}
}

func (x *SdsLinker) GetOriginalCid() string {
	if x != nil {
		return x.OriginalCid
	}
	return ""
}

func (x *SdsLinker) GetSdsFileHash() string {
	if x != nil {
		return x.SdsFileHash
	}
	return ""
}

var File_store_proto protoreflect.FileDescriptor

var file_store_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0xf9, 0x09, 0x0a, 0x0a, 0x50, 0x50, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x73, 0x41, 0x6e, 0x64, 0x56, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x32,
	0x70, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x69, 0x6e, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6e,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x50, 0x32, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x6e, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x70, 0x5f, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x70, 0x50, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x69,
	0x6e, 0x55, 0x6e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x40, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x6f, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x6f, 0x7a, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x54,
	0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0a, 0x53, 0x50, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x32, 0x70, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x32,
	0x70, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x11,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x99, 0x04, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa6, 0x02,
	0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x50, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x50, 0x22, 0x8a, 0x03,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x50,
	0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f,
	0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x50,
	0x12, 0x38, 0x0a, 0x18, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x04, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x22,
	0x86, 0x03, 0x0a, 0x09, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x32, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x22, 0x9c, 0x04, 0x0a, 0x0a, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x53, 0x70, 0x73, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x42, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x69, 0x67,
	0x68, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x22, 0x9e, 0x04, 0x0a, 0x0f, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x73, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x22, 0xb6, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x6f, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x50, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x87, 0x04, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x66, 0x68, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x66, 0x68, 0x74, 0x55, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x68, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x66, 0x68, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x66, 0x68, 0x6c, 0x5f, 0x66, 0x68, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x66,
	0x68, 0x6c, 0x46, 0x68, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x69, 0x64, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x68, 0x74, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x66, 0x68, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0xe8, 0x0e, 0x0a, 0x12,
	0x50, 0x50, 0x54, 0x69, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x65,
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x69,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3f,
	0x0a, 0x1c, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x52, 0x0a, 0x16, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x6e, 0x63, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x13,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x52, 0x0a, 0x16, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x63, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x13, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x63, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x31, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69,
	0x65, 0x72, 0x31, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x65, 0x72, 0x32, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x65, 0x72, 0x33, 0x12, 0x3f, 0x0a, 0x1a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x15,
	0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x6d, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x28, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72,
	0x31, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x69, 0x65, 0x72, 0x31, 0x12, 0x35, 0x0a,
	0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54,
	0x69, 0x65, 0x72, 0x32, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x33, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x69, 0x65, 0x72, 0x33, 0x12, 0x37, 0x0a, 0x18, 0x6d,
	0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d,
	0x69, 0x6e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54,
	0x69, 0x65, 0x72, 0x31, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x32,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x69, 0x65, 0x72, 0x32, 0x12, 0x37, 0x0a,
	0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6d, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x54, 0x69, 0x65, 0x72, 0x33, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x31, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x69, 0x65, 0x72, 0x31, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54,
	0x69, 0x65, 0x72, 0x32, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x33, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x69,
	0x65, 0x72, 0x33, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x55, 0x6e, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6e, 0x65,
	0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x15, 0x50, 0x50, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x2f, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x63, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x22, 0x5c, 0x0a, 0x15, 0x50, 0x50, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x44, 0x65, 0x63, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2f, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65,
	0x63, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x65, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x32, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x22,
	0x3b, 0x0a, 0x0b, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a,
	0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x32, 0x70, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a,
	0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6c,
	0x73, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x68, 0x6c, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6c, 0x73, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x68, 0x6c, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xc3, 0x02, 0x0a, 0x0f, 0x50, 0x50, 0x48, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x65,
	0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x68, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x31, 0x12, 0x30, 0x0a, 0x14,
	0x68, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x68, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x32, 0x12, 0x30,
	0x0a, 0x14, 0x68, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x65, 0x72, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x68, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x33,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x65, 0x72, 0x31, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x32, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x6d, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72,
	0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x33, 0x22, 0x50, 0x0a, 0x0d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3f, 0x0a,
	0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x4f,
	0x0a, 0x12, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xb5, 0x02, 0x0a, 0x0c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a,
	0x1f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x74, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x70, 0x61, 0x6d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x19, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x73, 0x70, 0x61, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x70, 0x22, 0x69, 0x0a, 0x07, 0x46, 0x73, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43,
	0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x14, 0x46, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x43, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x22, 0xa2,
	0x01, 0x0a, 0x0b, 0x46, 0x73, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x70,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x70, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x73, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x66, 0x73, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x33, 0x0a, 0x10, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x0a, 0x09, 0x53, 0x64, 0x73, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x64,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x2a, 0x68, 0x0a, 0x0b, 0x50, 0x50, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x82,
	0x01, 0x0a, 0x11, 0x50, 0x50, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x57, 0x4e,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x04, 0x2a, 0x9b, 0x01, 0x0a, 0x11, 0x50, 0x50, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x44, 0x65, 0x63, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x05, 0x2a, 0x46, 0x0a, 0x0b, 0x50, 0x50, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x41, 0x42, 0x49, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x2a, 0x2e, 0x0a, 0x0e, 0x54, 0x69, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x57,
	0x4e, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x01, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x6e,
	0x65, 0x74, 0x2f, 0x73, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_store_proto_rawDescOnce sync.Once
	file_store_proto_rawDescData = file_store_proto_rawDesc
)

func file_store_proto_rawDescGZIP() []byte {
	file_store_proto_rawDescOnce.Do(func() {
		file_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_store_proto_rawDescData)
	})
	return file_store_proto_rawDescData
}

var file_store_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_store_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_store_proto_goTypes = []interface{}{
	(PPStateType)(0),              // 0: protos.PPStateType
	(TrafficTaskType)(0),          // 1: protos.TrafficTaskType
	(PPWeightIncrEvent)(0),        // 2: protos.PPWeightIncrEvent
	(PPWeightDecrEvent)(0),        // 3: protos.PPWeightDecrEvent
	(PPTierLevel)(0),              // 4: protos.PPTierLevel
	(TierChangeType)(0),           // 5: protos.TierChangeType
	(*PPNodeInfo)(nil),            // 6: protos.PPNodeInfo
	(*Account)(nil),               // 7: protos.Account
	(*StandardTxReporter)(nil),    // 8: protos.StandardTxReporter
	(*SPNodeInfo)(nil),            // 9: protos.SPNodeInfo
	(*WalletsToReward)(nil),       // 10: protos.WalletsToReward
	(*AggregatedTraffic)(nil),     // 11: protos.AggregatedTraffic
	(*Traffic)(nil),               // 12: protos.Traffic
	(*File)(nil),                  // 13: protos.File
	(*FileSlice)(nil),             // 14: protos.FileSlice
	(*UserHasFile)(nil),           // 15: protos.UserHasFile
	(*UserHasFileStats)(nil),      // 16: protos.UserHasFileStats
	(*UserShare)(nil),             // 17: protos.UserShare
	(*FileDownload)(nil),          // 18: protos.FileDownload
	(*FileSliceDownload)(nil),     // 19: protos.FileSliceDownload
	(*Task)(nil),                  // 20: protos.Task
	(*SliceTask)(nil),             // 21: protos.SliceTask
	(*BackupTask)(nil),            // 22: protos.BackupTask
	(*SliceBackupTask)(nil),       // 23: protos.SliceBackupTask
	(*FileSliceBackup)(nil),       // 24: protos.FileSliceBackup
	(*AutoScaleParams)(nil),       // 25: protos.AutoScaleParams
	(*PPTierWeightParams)(nil),    // 26: protos.PPTierWeightParams
	(*PPWeightIncrEventStep)(nil), // 27: protos.PPWeightIncrEventStep
	(*PPWeightDecrEventStep)(nil), // 28: protos.PPWeightDecrEventStep
	(*TierChange)(nil),            // 29: protos.TierChange
	(*TierChanges)(nil),           // 30: protos.TierChanges
	(*IndexingNode)(nil),          // 31: protos.IndexingNode
	(*HashRingParams)(nil),        // 32: protos.HashRingParams
	(*FileStorageParams)(nil),     // 33: protos.FileStorageParams
	(*PPHwRequirement)(nil),       // 34: protos.PPHwRequirement
	(*RewardsParams)(nil),         // 35: protos.RewardsParams
	(*VolumeReportParams)(nil),    // 36: protos.VolumeReportParams
	(*HeightParams)(nil),          // 37: protos.HeightParams
	(*FslStat)(nil),               // 38: protos.FslStat
	(*FslStatEntryToAppend)(nil),  // 39: protos.FslStatEntryToAppend
	(*FslWithStat)(nil),           // 40: protos.FslWithStat
	(*ScoreUpdateParams)(nil),     // 41: protos.ScoreUpdateParams
	(*TrustedWhitelist)(nil),      // 42: protos.TrustedWhitelist
	(*SdsLinker)(nil),             // 43: protos.SdsLinker
}
var file_store_proto_depIdxs = []int32{
	0,  // 0: protos.PPNodeInfo.state:type_name -> protos.PPStateType
	1,  // 1: protos.Traffic.task_type:type_name -> protos.TrafficTaskType
	24, // 2: protos.BackupTask.completed_slices:type_name -> protos.FileSliceBackup
	27, // 3: protos.PPTierWeightParams.weight_incr_event_step:type_name -> protos.PPWeightIncrEventStep
	28, // 4: protos.PPTierWeightParams.weight_decr_event_step:type_name -> protos.PPWeightDecrEventStep
	2,  // 5: protos.PPWeightIncrEventStep.event:type_name -> protos.PPWeightIncrEvent
	3,  // 6: protos.PPWeightDecrEventStep.event:type_name -> protos.PPWeightDecrEvent
	5,  // 7: protos.TierChange.type:type_name -> protos.TierChangeType
	29, // 8: protos.TierChanges.changes:type_name -> protos.TierChange
	6,  // 9: protos.FslWithStat.pp_node:type_name -> protos.PPNodeInfo
	38, // 10: protos.FslWithStat.fsl_stat:type_name -> protos.FslStat
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_store_proto_init() }
func file_store_proto_init() {
	if File_store_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardTxReporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletsToReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHasFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHasFileStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSliceDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceBackupTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSliceBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoScaleParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPTierWeightParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPWeightIncrEventStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPWeightDecrEventStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TierChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TierChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexingNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashRingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileStorageParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPHwRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeReportParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeightParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FslStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FslStatEntryToAppend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FslWithStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreUpdateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustedWhitelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdsLinker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_store_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_proto_goTypes,
		DependencyIndexes: file_store_proto_depIdxs,
		EnumInfos:         file_store_proto_enumTypes,
		MessageInfos:      file_store_proto_msgTypes,
	}.Build()
	File_store_proto = out.File
	file_store_proto_rawDesc = nil
	file_store_proto_goTypes = nil
	file_store_proto_depIdxs = nil
}